req.
POST
age: int
salary: int
name: str
auth_token



Resp.
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}



Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса {{url}}/get_test_user
4) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
5) проверить, что 2-й элемент массива salary больше 1-го и 0-го

--------------------------------------
{
    "age": 25,
    "name": "Olesya",
    "salary": [
        1000,
        "2000",
        "3000"
    ]
}




pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});


---------------------------------------------------
var schema = {
  "type": "object",
  "properties": {
    "age": {
      "type": "integer"
    },
    "name": {
      "type": "string"
    },
    "salary": {
      "type": "array",
      "items": [
        {
          "type": "integer"
        },
        {
          "type": "string"
        },
        {
          "type": "string"
        }
      ]
    }
  },
  "required": [
    "age",
    "name",
    "salary"
  ]
}


const jsonData = pm.response.json();

pm.test('Schema is valid', function () {
    pm.expect(tv4.validate(jsonData, schema)).to.be.true;
});


---------------------------------------------------------
pm.test("Salary 1 2 chek", function () {
    let jsonData = pm.response.json();
    let salary1 = +(jsonData.salary[1]);
    let salary2 = +(jsonData.salary[2]);
    pm.expect(salary1).to.eql(jsonData.salary[0]*2);
    pm.expect(salary2).to.eql(jsonData.salary[0]*3);

});



-------------------------------------------------------
pm.test("salary 2 more than salary 1", function () {
    let jsonData = pm.response.json();
     let salary1 = +(jsonData.salary[1]);
    let salary2 = +(jsonData.salary[2]);
    pm.expect(salary2>salary1).to.be.true;

});


