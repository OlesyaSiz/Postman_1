req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name': name,
 'age':age,
 'salary': salary,
 'family':{'children':[['Alex', 24],['Kate', 12]],
 'u_salary_1.5_year': salary * 4}
  }

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) Проверить что значение поля name = значению переменной name из окружения
4) Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age

--------------------------------------------------
 {
    "age": "25",
    "family": {
        "children": [
            [
                "Alex",
                24
            ],
            [
                "Kate",
                12
            ]
        ],
        "u_salary_1_5_year": 24000
    },
    "name": "Olesya",
    "salary": 6000
}



Tests:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});



-----------------------------------------------
var schema = {
   "type": "object",
  "properties": {
    "age": {
      "type": "string"
    },
    "family": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": [
            {
              "type": "array",
              "items": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            {
              "type": "array",
              "items": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          ]
        },
        "u_salary_1_5_year": {
          "type": "integer"
        }
      },
      "required": [
        "children",
        "u_salary_1_5_year"
      ]
    },
    "name": {
      "type": "string"
    },
    "salary": {
      "type": "integer"
    }
  },
  "required": [
    "age",
    "family",
    "name",
    "salary"
  ]
}



const jsonData = pm.response.json();

pm.test('Schema is valid', function () {
    pm.expect(tv4.validate(jsonData, schema)).to.be.true;
    
});

--------------------------------------------------------------
pm.test("nameEnviroment=nameBody", function () {
    var jsonData = pm.response.json();
    pm.environment.set("name",pm.request.body.formdata.get("name"));
    pm.expect(pm.environment.name = pm.request.body.formdata.get("name"));

}); 


-------------------------------------------------------------------------
pm.test("ageRequest=ageBody", function () {
     var jsonData = pm.response.json();
     pm.expect(jsonData.age=pm.request.body.formdata.get("age"));

});
     


