req.
POST
age: int
salary: int
name: str
auth_token


resp.
{'start_qa_salary':salary,
 'qa_salary_after_6_months': salary * 2,
 'qa_salary_after_12_months': salary * 2.9,
 'person': {'u_name':[user_name, salary, age],
                                'u_age':age,
                                'u_salary_1.5_year': salary * 4}
                                }

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.


----------------------------------

{
    "person": {
        "u_age": 25,
        "u_name": [
            "Olesya",
            1500,
            25
        ],
        "u_salary_1_5_year": 6000
    },
    "qa_salary_after_12_months": 4350.0,
    "qa_salary_after_6_months": 3000,
    "start_qa_salary": 1500
}



Tests:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});



-------------------------------------------
var schema = {
     "type": "object",
  "properties": {
    "person": {
      "type": "object",
      "properties": {
        "u_age": {
          "type": "integer"
        },
        "u_name": {
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            },
            {
              "type": "integer"
            }
          ]
        },
        "u_salary_1_5_year": {
          "type": "integer"
        }
      },
      "required": [
        "u_age",
        "u_name",
        "u_salary_1_5_year"
      ]
    },
    "qa_salary_after_12_months": {
      "type": "number"
    },
    "qa_salary_after_6_months": {
      "type": "integer"
    },
    "start_qa_salary": {
      "type": "integer"
    }
  },
  "required": [
    "person",
    "qa_salary_after_12_months",
    "qa_salary_after_6_months",
    "start_qa_salary"
  ]
};

const jsonData = pm.response.json();

pm.test('Schema is valid', function () {
    pm.expect(tv4.validate(jsonData, schema)).to.be.true;
});



---------------------------------------------------------------
pm.test("Salary 6 months chek", function () {
    let jsonData = pm.response.json();
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(jsonData.person.u_name[1]*2);
});             


-----------------------------------------------------
pm.test("Salary 12 months chek", function () {
    let jsonData = pm.response.json();
    pm.expect(jsonData.qa_salary_after_12_months).to.eql(jsonData.person.u_name[1]*2.9);
}); 


-----------------------------------------------------
pm.test("Y_salary_1_5_year", function () {
    var jsomData = pm.response.json();
    pm.environment.set("salary1.5", jsonData.person.u_salary_1_5_year);
    });

